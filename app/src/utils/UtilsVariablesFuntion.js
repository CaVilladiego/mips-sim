export function assignInstructionVariables(instruction) {
    const instructionMap = {
        "add": {
            PCwrite: 0,
            PcWriteCond: 0,
            lorD: 0,
            MemRead: 0,
            MemWrite: 0,
            IRWrite: 0,
            MemToReg: 0,
            PCsource: 0,
            TargetWrite: 0,
            ALUOp: "10",
            ALUSelB: "00",
            ALUSelA: 1,
            RegWrite: 1,
            RegDst: 1
        },
        "sub": {
            PCwrite: 0,
            PcWriteCond: 0,
            lorD: 0,
            MemRead: 0,
            MemWrite: 0,
            IRWrite: 0,
            MemToReg: 0,
            PCsource: 0,
            TargetWrite: 0,
            ALUOp: "10",
            ALUSelB: "00",
            ALUSelA: 1,
            RegWrite: 1,
            RegDst: 1
        },
        "slt": {
            PCwrite: 0,
            PcWriteCond: 0,
            lorD: 0,
            MemRead: 0,
            MemWrite: 0,
            IRWrite: 0,
            MemToReg: 0,
            PCsource: 0,
            TargetWrite: 0,
            ALUOp: "10",
            ALUSelB: "00",
            ALUSelA: 1,
            RegWrite: 1,
            RegDst: 1
        },
        "and": {
            PCwrite: 0,
            PcWriteCond: 0,
            lorD: 0,
            MemRead: 0,
            MemWrite: 0,
            IRWrite: 0,
            MemToReg: 0,
            PCsource: 0,
            TargetWrite: 0,
            ALUOp: "10",
            ALUSelB: "00",
            ALUSelA: 1,
            RegWrite: 1,
            RegDst: 1
        },
        "or": {
            PCwrite: 0,
            PcWriteCond: 0,
            lorD: 0,
            MemRead: 0,
            MemWrite: 0,
            IRWrite: 0,
            MemToReg: 0,
            PCsource: 0,
            TargetWrite: 0,
            ALUOp: "10",
            ALUSelB: "00",
            ALUSelA: 1,
            RegWrite: 1,
            RegDst: 1
        },
        "addi": {
            PCwrite: 0,
            PcWriteCond: 0,
            lorD: 0,
            MemRead: 0,
            MemWrite: 0,
            IRWrite: 0,
            MemToReg: 0,
            PCsource: 0,
            TargetWrite: 0,
            ALUOp: "00",
            ALUSelB: "10",
            ALUSelA: 1,
            RegWrite: 1,
            RegDst: 0
        },
        "lw": {
            PCwrite: 0,
            PcWriteCond: 0,
            lorD: 1,
            MemRead: 1,
            MemWrite: 0,
            IRWrite: 1,
            MemToReg: 1,
            PCsource: 0,
            TargetWrite: 0,
            ALUOp: "00",
            ALUSelB: "10",
            ALUSelA: 0,
            RegWrite: 1,
            RegDst: 0
        },
        "sw": {
            PCwrite: 0,
            PcWriteCond: 0,
            lorD: 1,
            MemRead: 0,
            MemWrite: 1,
            IRWrite: 0,
            MemToReg: 0,
            PCsource: 0,
            TargetWrite: 0,
            ALUOp: "00",
            ALUSelB: "10",
            ALUSelA: 0,
            RegWrite: 0,
            RegDst: 0
        },
        "beq": {
            PCwrite: 0,
            PcWriteCond: 1,
            lorD: 0,
            MemRead: 0,
            MemWrite: 0,
            IRWrite: 0,
            MemToReg: 0,
            PCsource: 1,
            TargetWrite: 0,
            ALUOp: "01",
            ALUSelB: "00",
            ALUSelA: 1,
            RegWrite: 0,
            RegDst: 0
        },
        "bne": {
            PCwrite: 0,
            PcWriteCond: 1,
            lorD: 0,
            MemRead: 0,
            MemWrite: 0,
            IRWrite: 0,
            MemToReg: 0,
            PCsource: 1,
            TargetWrite: 0,
            ALUOp: "01",
            ALUSelB: "00",
            ALUSelA: 1,
            RegWrite: 0,
            RegDst: 0
        },
        "j": {
            PCwrite: 1,
            PcWriteCond: 0,
            lorD: 0,
            MemRead: 0,
            MemWrite: 0,
            IRWrite: 0,
            MemToReg: 0,
            PCsource: 2,
            TargetWrite: 0,
            ALUOp: "00",
            ALUSelB: "00",
            ALUSelA: 0,
            RegWrite: 0,
            RegDst: 0
        }
    };

    const instructionParts = instruction.split(' ');
    const instructionType = instructionParts[0];

    if (instructionMap[instructionType]) {
        return instructionMap[instructionType];
    } else {
        throw new Error(`Instrucci√≥n no reconocida: ${instructionType}`);
    }
}